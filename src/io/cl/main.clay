import printer.(println);
import strings.(String);
import vectors.(Vector);
import aera.aera.*;
import aera.generated.*;
import aera.primitives.*;

// -----------------------------------------------------------------------------------------------

record Context
(
    //demo purpose
    demo: Vector[String]
);

external aera_open(argc:Int, argv:Pointer[Pointer[CChar]], _ctx:Pointer[aera_context]) : Int32
{
    var ctx = allocateObject(Context());

    push(ctx^.demo, String("foo"));
    push(ctx^.demo, String("blabla"));

    _ctx^.data = OpaquePointer(ctx);
    return Int32(AERA_E_SUCCESS);
}

external aera_close(_ctx:aera_context) : Int32
{
    var ctx = Pointer[Context](_ctx.data);
    freeObject(ctx);
    return Int32(AERA_E_SUCCESS);
}

external aera_pull(_ctx:aera_context, item:Pointer[aera_item]) : Int32
{
    var ctx = Pointer[Context](_ctx.data);
    item^= liftAeraItem(addressOf(ctx^.demo), #false);
    return Int32(AERA_E_SUCCESS);
}

external aera_version() : Int32
{
    return 1;
}
